// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface Rect ()
+ (Rect *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ResultObjectDetection ()
+ (ResultObjectDetection *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation Rect
+ (instancetype)makeWithLeft:(NSNumber *)left
    top:(NSNumber *)top
    right:(NSNumber *)right
    bottom:(NSNumber *)bottom
    width:(NSNumber *)width
    height:(NSNumber *)height {
  Rect* pigeonResult = [[Rect alloc] init];
  pigeonResult.left = left;
  pigeonResult.top = top;
  pigeonResult.right = right;
  pigeonResult.bottom = bottom;
  pigeonResult.width = width;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (Rect *)fromMap:(NSDictionary *)dict {
  Rect *pigeonResult = [[Rect alloc] init];
  pigeonResult.left = GetNullableObject(dict, @"left");
  NSAssert(pigeonResult.left != nil, @"");
  pigeonResult.top = GetNullableObject(dict, @"top");
  NSAssert(pigeonResult.top != nil, @"");
  pigeonResult.right = GetNullableObject(dict, @"right");
  NSAssert(pigeonResult.right != nil, @"");
  pigeonResult.bottom = GetNullableObject(dict, @"bottom");
  NSAssert(pigeonResult.bottom != nil, @"");
  pigeonResult.width = GetNullableObject(dict, @"width");
  NSAssert(pigeonResult.width != nil, @"");
  pigeonResult.height = GetNullableObject(dict, @"height");
  NSAssert(pigeonResult.height != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.left ? self.left : [NSNull null]), @"left", (self.top ? self.top : [NSNull null]), @"top", (self.right ? self.right : [NSNull null]), @"right", (self.bottom ? self.bottom : [NSNull null]), @"bottom", (self.width ? self.width : [NSNull null]), @"width", (self.height ? self.height : [NSNull null]), @"height", nil];
}
@end

@implementation ResultObjectDetection
+ (instancetype)makeWithClassIndex:(NSNumber *)classIndex
    className:(nullable NSString *)className
    score:(NSNumber *)score
    rect:(Rect *)rect {
  ResultObjectDetection* pigeonResult = [[ResultObjectDetection alloc] init];
  pigeonResult.classIndex = classIndex;
  pigeonResult.className = className;
  pigeonResult.score = score;
  pigeonResult.rect = rect;
  return pigeonResult;
}
+ (ResultObjectDetection *)fromMap:(NSDictionary *)dict {
  ResultObjectDetection *pigeonResult = [[ResultObjectDetection alloc] init];
  pigeonResult.classIndex = GetNullableObject(dict, @"classIndex");
  NSAssert(pigeonResult.classIndex != nil, @"");
  pigeonResult.className = GetNullableObject(dict, @"className");
  pigeonResult.score = GetNullableObject(dict, @"score");
  NSAssert(pigeonResult.score != nil, @"");
  pigeonResult.rect = [Rect fromMap:GetNullableObject(dict, @"rect")];
  NSAssert(pigeonResult.rect != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.classIndex ? self.classIndex : [NSNull null]), @"classIndex", (self.className ? self.className : [NSNull null]), @"className", (self.score ? self.score : [NSNull null]), @"score", (self.rect ? [self.rect toMap] : [NSNull null]), @"rect", nil];
}
@end

@interface ModelApiCodecReader : FlutterStandardReader
@end
@implementation ModelApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [Rect fromMap:[self readValue]];
    
    case 129:     
      return [ResultObjectDetection fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ModelApiCodecWriter : FlutterStandardWriter
@end
@implementation ModelApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[Rect class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ResultObjectDetection class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ModelApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ModelApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ModelApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ModelApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ModelApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    ModelApiCodecReaderWriter *readerWriter = [[ModelApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void ModelApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ModelApi> *api) {
  {
    NSObject<FlutterTaskQueue> *taskQueue = [binaryMessenger makeBackgroundTaskQueue];
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ModelApi.loadModel"
        binaryMessenger:binaryMessenger
        codec:ModelApiGetCodec()
        taskQueue:taskQueue];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loadModelModelPath:numberOfClasses:imageWidth:imageHeight:error:)], @"ModelApi api (%@) doesn't respond to @selector(loadModelModelPath:numberOfClasses:imageWidth:imageHeight:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_modelPath = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_numberOfClasses = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_imageWidth = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_imageHeight = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        NSNumber *output = [api loadModelModelPath:arg_modelPath numberOfClasses:arg_numberOfClasses imageWidth:arg_imageWidth imageHeight:arg_imageHeight error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    NSObject<FlutterTaskQueue> *taskQueue = [binaryMessenger makeBackgroundTaskQueue];
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ModelApi.getPredictionCustom"
        binaryMessenger:binaryMessenger
        codec:ModelApiGetCodec()
        taskQueue:taskQueue];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPredictionCustomIndex:input:shape:dtype:completion:)], @"ModelApi api (%@) doesn't respond to @selector(getPredictionCustomIndex:input:shape:dtype:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_index = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_input = GetNullableObjectAtIndex(args, 1);
        NSArray<NSNumber *> *arg_shape = GetNullableObjectAtIndex(args, 2);
        NSString *arg_dtype = GetNullableObjectAtIndex(args, 3);
        [api getPredictionCustomIndex:arg_index input:arg_input shape:arg_shape dtype:arg_dtype completion:^(NSArray *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    NSObject<FlutterTaskQueue> *taskQueue = [binaryMessenger makeBackgroundTaskQueue];
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ModelApi.getImagePredictionList"
        binaryMessenger:binaryMessenger
        codec:ModelApiGetCodec()
        taskQueue:taskQueue];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getImagePredictionListIndex:imageData:mean:std:completion:)], @"ModelApi api (%@) doesn't respond to @selector(getImagePredictionListIndex:imageData:mean:std:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_index = GetNullableObjectAtIndex(args, 0);
        FlutterStandardTypedData *arg_imageData = GetNullableObjectAtIndex(args, 1);
        NSArray<NSNumber *> *arg_mean = GetNullableObjectAtIndex(args, 2);
        NSArray<NSNumber *> *arg_std = GetNullableObjectAtIndex(args, 3);
        [api getImagePredictionListIndex:arg_index imageData:arg_imageData mean:arg_mean std:arg_std completion:^(NSArray<NSNumber *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    NSObject<FlutterTaskQueue> *taskQueue = [binaryMessenger makeBackgroundTaskQueue];
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ModelApi.getImagePredictionListObjectDetection"
        binaryMessenger:binaryMessenger
        codec:ModelApiGetCodec()
        taskQueue:taskQueue];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getImagePredictionListObjectDetectionIndex:imageData:minimumScore:IOUThreshold:boxesLimit:completion:)], @"ModelApi api (%@) doesn't respond to @selector(getImagePredictionListObjectDetectionIndex:imageData:minimumScore:IOUThreshold:boxesLimit:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_index = GetNullableObjectAtIndex(args, 0);
        FlutterStandardTypedData *arg_imageData = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_minimumScore = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_IOUThreshold = GetNullableObjectAtIndex(args, 3);
        NSNumber *arg_boxesLimit = GetNullableObjectAtIndex(args, 4);
        [api getImagePredictionListObjectDetectionIndex:arg_index imageData:arg_imageData minimumScore:arg_minimumScore IOUThreshold:arg_IOUThreshold boxesLimit:arg_boxesLimit completion:^(NSArray<ResultObjectDetection *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
