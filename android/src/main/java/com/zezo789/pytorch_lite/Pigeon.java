// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.zezo789.pytorch_lite;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum DType {
    float32(0),
    float64(1),
    int32(2),
    int64(3),
    int8(4),
    uint8(5);

    private int index;
    private DType(final int index) {
      this.index = index;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class ModelApiCodec extends StandardMessageCodec {
    public static final ModelApiCodec INSTANCE = new ModelApiCodec();
    private ModelApiCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ModelApi {
    @NonNull Long loadModel(@NonNull String modelPath, @NonNull String labelsPath);
    void getPredictionCustom(@NonNull Long index, @NonNull List<Double> input, @NonNull List<Long> shape, @NonNull String dtype, Result<List<Object>> result);
    void getImagePrediction(@NonNull Long index, @NonNull String imagePath, @NonNull Long width, @NonNull Long height, @NonNull List<Double> mean, @NonNull List<Double> std, Result<String> result);
    void getImagePredictionList(@NonNull Long index, @NonNull String imagePath, @NonNull Long width, @NonNull Long height, @NonNull List<Double> mean, @NonNull List<Double> std, Result<List<Object>> result);
    void getImagePredictionObjectDetection(@NonNull Long index, @NonNull String imagePath, @NonNull Long width, @NonNull Long height, @NonNull List<Double> mean, @NonNull List<Double> std, Result<String> result);
    void getImagePredictionListObjectDetection(@NonNull Long index, @NonNull String imagePath, @NonNull Long width, @NonNull Long height, @NonNull List<Double> mean, @NonNull List<Double> std, Result<List<Object>> result);

    /** The codec used by ModelApi. */
    static MessageCodec<Object> getCodec() {
      return ModelApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ModelApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ModelApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ModelApi.loadModel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String modelPathArg = (String)args.get(0);
              if (modelPathArg == null) {
                throw new NullPointerException("modelPathArg unexpectedly null.");
              }
              String labelsPathArg = (String)args.get(1);
              if (labelsPathArg == null) {
                throw new NullPointerException("labelsPathArg unexpectedly null.");
              }
              Long output = api.loadModel(modelPathArg, labelsPathArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ModelApi.getPredictionCustom", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number indexArg = (Number)args.get(0);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              List<Double> inputArg = (List<Double>)args.get(1);
              if (inputArg == null) {
                throw new NullPointerException("inputArg unexpectedly null.");
              }
              List<Long> shapeArg = (List<Long>)args.get(2);
              if (shapeArg == null) {
                throw new NullPointerException("shapeArg unexpectedly null.");
              }
              String dtypeArg = (String)args.get(3);
              if (dtypeArg == null) {
                throw new NullPointerException("dtypeArg unexpectedly null.");
              }
              Result<List<Object>> resultCallback = new Result<List<Object>>() {
                public void success(List<Object> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getPredictionCustom((indexArg == null) ? null : indexArg.longValue(), inputArg, shapeArg, dtypeArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ModelApi.getImagePrediction", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number indexArg = (Number)args.get(0);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              String imagePathArg = (String)args.get(1);
              if (imagePathArg == null) {
                throw new NullPointerException("imagePathArg unexpectedly null.");
              }
              Number widthArg = (Number)args.get(2);
              if (widthArg == null) {
                throw new NullPointerException("widthArg unexpectedly null.");
              }
              Number heightArg = (Number)args.get(3);
              if (heightArg == null) {
                throw new NullPointerException("heightArg unexpectedly null.");
              }
              List<Double> meanArg = (List<Double>)args.get(4);
              if (meanArg == null) {
                throw new NullPointerException("meanArg unexpectedly null.");
              }
              List<Double> stdArg = (List<Double>)args.get(5);
              if (stdArg == null) {
                throw new NullPointerException("stdArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getImagePrediction((indexArg == null) ? null : indexArg.longValue(), imagePathArg, (widthArg == null) ? null : widthArg.longValue(), (heightArg == null) ? null : heightArg.longValue(), meanArg, stdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ModelApi.getImagePredictionList", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number indexArg = (Number)args.get(0);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              String imagePathArg = (String)args.get(1);
              if (imagePathArg == null) {
                throw new NullPointerException("imagePathArg unexpectedly null.");
              }
              Number widthArg = (Number)args.get(2);
              if (widthArg == null) {
                throw new NullPointerException("widthArg unexpectedly null.");
              }
              Number heightArg = (Number)args.get(3);
              if (heightArg == null) {
                throw new NullPointerException("heightArg unexpectedly null.");
              }
              List<Double> meanArg = (List<Double>)args.get(4);
              if (meanArg == null) {
                throw new NullPointerException("meanArg unexpectedly null.");
              }
              List<Double> stdArg = (List<Double>)args.get(5);
              if (stdArg == null) {
                throw new NullPointerException("stdArg unexpectedly null.");
              }
              Result<List<Object>> resultCallback = new Result<List<Object>>() {
                public void success(List<Object> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getImagePredictionList((indexArg == null) ? null : indexArg.longValue(), imagePathArg, (widthArg == null) ? null : widthArg.longValue(), (heightArg == null) ? null : heightArg.longValue(), meanArg, stdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ModelApi.getImagePredictionObjectDetection", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number indexArg = (Number)args.get(0);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              String imagePathArg = (String)args.get(1);
              if (imagePathArg == null) {
                throw new NullPointerException("imagePathArg unexpectedly null.");
              }
              Number widthArg = (Number)args.get(2);
              if (widthArg == null) {
                throw new NullPointerException("widthArg unexpectedly null.");
              }
              Number heightArg = (Number)args.get(3);
              if (heightArg == null) {
                throw new NullPointerException("heightArg unexpectedly null.");
              }
              List<Double> meanArg = (List<Double>)args.get(4);
              if (meanArg == null) {
                throw new NullPointerException("meanArg unexpectedly null.");
              }
              List<Double> stdArg = (List<Double>)args.get(5);
              if (stdArg == null) {
                throw new NullPointerException("stdArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getImagePredictionObjectDetection((indexArg == null) ? null : indexArg.longValue(), imagePathArg, (widthArg == null) ? null : widthArg.longValue(), (heightArg == null) ? null : heightArg.longValue(), meanArg, stdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ModelApi.getImagePredictionListObjectDetection", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number indexArg = (Number)args.get(0);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              String imagePathArg = (String)args.get(1);
              if (imagePathArg == null) {
                throw new NullPointerException("imagePathArg unexpectedly null.");
              }
              Number widthArg = (Number)args.get(2);
              if (widthArg == null) {
                throw new NullPointerException("widthArg unexpectedly null.");
              }
              Number heightArg = (Number)args.get(3);
              if (heightArg == null) {
                throw new NullPointerException("heightArg unexpectedly null.");
              }
              List<Double> meanArg = (List<Double>)args.get(4);
              if (meanArg == null) {
                throw new NullPointerException("meanArg unexpectedly null.");
              }
              List<Double> stdArg = (List<Double>)args.get(5);
              if (stdArg == null) {
                throw new NullPointerException("stdArg unexpectedly null.");
              }
              Result<List<Object>> resultCallback = new Result<List<Object>>() {
                public void success(List<Object> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getImagePredictionListObjectDetection((indexArg == null) ? null : indexArg.longValue(), imagePathArg, (widthArg == null) ? null : widthArg.longValue(), (heightArg == null) ? null : heightArg.longValue(), meanArg, stdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
