// Autogenerated from Pigeon (v9.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.zezo357.pytorch_lite;

import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;

/**
 * Generated class from Pigeon.
 */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {
    @NonNull
    private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
        ArrayList<Object> errorList = new ArrayList<Object>(3);
        errorList.add(exception.toString());
        errorList.add(exception.getClass().getSimpleName());
        errorList.add(
                "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
        return errorList;
    }

    public enum ObjectDetectionModelType {
        YOLOV5(0),
        YOLOV8(1);

        private final int index;

        ObjectDetectionModelType(final int index) {
            this.index = index;
        }
    }

    public interface Result<T> {
        void success(T result);

        void error(Throwable error);
    }

    /**
     * Generated interface from Pigeon that represents a handler of messages from Flutter.
     */
    public interface ModelApi {

        /**
         * The codec used by ModelApi.
         */
        static MessageCodec<Object> getCodec() {
            return ModelApiCodec.INSTANCE;
        }

        /**
         * Sets up an instance of `ModelApi` to handle messages through the `binaryMessenger`.
         */
        static void setup(BinaryMessenger binaryMessenger, ModelApi api) {
            {
                BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.ModelApi.loadModel", getCodec(), taskQueue);
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                try {
                                    ArrayList<Object> args = (ArrayList<Object>) message;
                                    assert args != null;
                                    String modelPathArg = (String) args.get(0);
                                    if (modelPathArg == null) {
                                        throw new NullPointerException("modelPathArg unexpectedly null.");
                                    }
                                    Number numberOfClassesArg = (Number) args.get(1);
                                    Number imageWidthArg = (Number) args.get(2);
                                    Number imageHeightArg = (Number) args.get(3);
                                    ObjectDetectionModelType objectDetectionModelTypeArg = args.get(4) == null ? null : ObjectDetectionModelType.values()[(int) args.get(4)];
                                    Long output = api.loadModel(modelPathArg, (numberOfClassesArg == null) ? null : numberOfClassesArg.longValue(), (imageWidthArg == null) ? null : imageWidthArg.longValue(), (imageHeightArg == null) ? null : imageHeightArg.longValue(), objectDetectionModelTypeArg);
                                    wrapped.add(0, output);
                                } catch (Error | RuntimeException exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    wrapped = wrappedError;
                                }
                                reply.reply(wrapped);
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.ModelApi.getPredictionCustom", getCodec(), taskQueue);
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                try {
                                    ArrayList<Object> args = (ArrayList<Object>) message;
                                    assert args != null;
                                    Number indexArg = (Number) args.get(0);
                                    if (indexArg == null) {
                                        throw new NullPointerException("indexArg unexpectedly null.");
                                    }
                                    List<Double> inputArg = (List<Double>) args.get(1);
                                    if (inputArg == null) {
                                        throw new NullPointerException("inputArg unexpectedly null.");
                                    }
                                    List<Long> shapeArg = (List<Long>) args.get(2);
                                    if (shapeArg == null) {
                                        throw new NullPointerException("shapeArg unexpectedly null.");
                                    }
                                    String dtypeArg = (String) args.get(3);
                                    if (dtypeArg == null) {
                                        throw new NullPointerException("dtypeArg unexpectedly null.");
                                    }
                                    Result<List<Object>> resultCallback =
                                            new Result<List<Object>>() {
                                                public void success(List<Object> result) {
                                                    wrapped.add(0, result);
                                                    reply.reply(wrapped);
                                                }

                                                public void error(Throwable error) {
                                                    ArrayList<Object> wrappedError = wrapError(error);
                                                    reply.reply(wrappedError);
                                                }
                                            };

                                    api.getPredictionCustom((indexArg == null) ? null : indexArg.longValue(), inputArg, shapeArg, dtypeArg, resultCallback);
                                } catch (Error | RuntimeException exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    reply.reply(wrappedError);
                                }
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.ModelApi.getImagePredictionList", getCodec(), taskQueue);
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                try {
                                    ArrayList<Object> args = (ArrayList<Object>) message;
                                    assert args != null;
                                    Number indexArg = (Number) args.get(0);
                                    if (indexArg == null) {
                                        throw new NullPointerException("indexArg unexpectedly null.");
                                    }
                                    byte[] imageDataArg = (byte[]) args.get(1);
                                    List<byte[]> imageBytesListArg = (List<byte[]>) args.get(2);
                                    Number imageWidthForBytesListArg = (Number) args.get(3);
                                    Number imageHeightForBytesListArg = (Number) args.get(4);
                                    List<Double> meanArg = (List<Double>) args.get(5);
                                    if (meanArg == null) {
                                        throw new NullPointerException("meanArg unexpectedly null.");
                                    }
                                    List<Double> stdArg = (List<Double>) args.get(6);
                                    if (stdArg == null) {
                                        throw new NullPointerException("stdArg unexpectedly null.");
                                    }
                                    Result<List<Double>> resultCallback =
                                            new Result<List<Double>>() {
                                                public void success(List<Double> result) {
                                                    wrapped.add(0, result);
                                                    reply.reply(wrapped);
                                                }

                                                public void error(Throwable error) {
                                                    ArrayList<Object> wrappedError = wrapError(error);
                                                    reply.reply(wrappedError);
                                                }
                                            };

                                    api.getImagePredictionList((indexArg == null) ? null : indexArg.longValue(), imageDataArg, imageBytesListArg, (imageWidthForBytesListArg == null) ? null : imageWidthForBytesListArg.longValue(), (imageHeightForBytesListArg == null) ? null : imageHeightForBytesListArg.longValue(), meanArg, stdArg, resultCallback);
                                } catch (Error | RuntimeException exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    reply.reply(wrappedError);
                                }
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
            {
                BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
                BasicMessageChannel<Object> channel =
                        new BasicMessageChannel<>(
                                binaryMessenger, "dev.flutter.pigeon.ModelApi.getImagePredictionListObjectDetection", getCodec(), taskQueue);
                if (api != null) {
                    channel.setMessageHandler(
                            (message, reply) -> {
                                ArrayList<Object> wrapped = new ArrayList<Object>();
                                try {
                                    ArrayList<Object> args = (ArrayList<Object>) message;
                                    assert args != null;
                                    Number indexArg = (Number) args.get(0);
                                    if (indexArg == null) {
                                        throw new NullPointerException("indexArg unexpectedly null.");
                                    }
                                    byte[] imageDataArg = (byte[]) args.get(1);
                                    List<byte[]> imageBytesListArg = (List<byte[]>) args.get(2);
                                    Number imageWidthForBytesListArg = (Number) args.get(3);
                                    Number imageHeightForBytesListArg = (Number) args.get(4);
                                    Double minimumScoreArg = (Double) args.get(5);
                                    if (minimumScoreArg == null) {
                                        throw new NullPointerException("minimumScoreArg unexpectedly null.");
                                    }
                                    Double IOUThresholdArg = (Double) args.get(6);
                                    if (IOUThresholdArg == null) {
                                        throw new NullPointerException("IOUThresholdArg unexpectedly null.");
                                    }
                                    Number boxesLimitArg = (Number) args.get(7);
                                    if (boxesLimitArg == null) {
                                        throw new NullPointerException("boxesLimitArg unexpectedly null.");
                                    }
                                    Result<List<ResultObjectDetection>> resultCallback =
                                            new Result<List<ResultObjectDetection>>() {
                                                public void success(List<ResultObjectDetection> result) {
                                                    wrapped.add(0, result);
                                                    reply.reply(wrapped);
                                                }

                                                public void error(Throwable error) {
                                                    ArrayList<Object> wrappedError = wrapError(error);
                                                    reply.reply(wrappedError);
                                                }
                                            };

                                    api.getImagePredictionListObjectDetection((indexArg == null) ? null : indexArg.longValue(), imageDataArg, imageBytesListArg, (imageWidthForBytesListArg == null) ? null : imageWidthForBytesListArg.longValue(), (imageHeightForBytesListArg == null) ? null : imageHeightForBytesListArg.longValue(), minimumScoreArg, IOUThresholdArg, (boxesLimitArg == null) ? null : boxesLimitArg.longValue(), resultCallback);
                                } catch (Error | RuntimeException exception) {
                                    ArrayList<Object> wrappedError = wrapError(exception);
                                    reply.reply(wrappedError);
                                }
                            });
                } else {
                    channel.setMessageHandler(null);
                }
            }
        }

        @NonNull
        Long loadModel(@NonNull String modelPath, @Nullable Long numberOfClasses, @Nullable Long imageWidth, @Nullable Long imageHeight, @Nullable ObjectDetectionModelType objectDetectionModelType);

        /**
         * predicts abstract number input
         */
        void getPredictionCustom(@NonNull Long index, @NonNull List<Double> input, @NonNull List<Long> shape, @NonNull String dtype, Result<List<Object>> result);

        /**
         * predicts image but returns the raw net output
         */
        void getImagePredictionList(@NonNull Long index, @Nullable byte[] imageData, @Nullable List<byte[]> imageBytesList, @Nullable Long imageWidthForBytesList, @Nullable Long imageHeightForBytesList, @NonNull List<Double> mean, @NonNull List<Double> std, Result<List<Double>> result);

        /**
         * predicts image but returns the output detections
         */
        void getImagePredictionListObjectDetection(@NonNull Long index, @Nullable byte[] imageData, @Nullable List<byte[]> imageBytesList, @Nullable Long imageWidthForBytesList, @Nullable Long imageHeightForBytesList, @NonNull Double minimumScore, @NonNull Double IOUThreshold, @NonNull Long boxesLimit, Result<List<ResultObjectDetection>> result);
    }

    /**
     * Generated class from Pigeon that represents data sent in messages.
     */
    public static final class PyTorchRect {
        private @NonNull
        Double left;
        private @NonNull
        Double top;
        private @NonNull
        Double right;
        private @NonNull
        Double bottom;
        private @NonNull
        Double width;
        private @NonNull
        Double height;

        /**
         * Constructor is private to enforce null safety; use Builder.
         */
        private PyTorchRect() {
        }

        static @NonNull
        PyTorchRect fromList(@NonNull ArrayList<Object> list) {
            PyTorchRect pigeonResult = new PyTorchRect();
            Object left = list.get(0);
            pigeonResult.setLeft((Double) left);
            Object top = list.get(1);
            pigeonResult.setTop((Double) top);
            Object right = list.get(2);
            pigeonResult.setRight((Double) right);
            Object bottom = list.get(3);
            pigeonResult.setBottom((Double) bottom);
            Object width = list.get(4);
            pigeonResult.setWidth((Double) width);
            Object height = list.get(5);
            pigeonResult.setHeight((Double) height);
            return pigeonResult;
        }

        public @NonNull
        Double getLeft() {
            return left;
        }

        public void setLeft(@NonNull Double setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"left\" is null.");
            }
            this.left = setterArg;
        }

        public @NonNull
        Double getTop() {
            return top;
        }

        public void setTop(@NonNull Double setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"top\" is null.");
            }
            this.top = setterArg;
        }

        public @NonNull
        Double getRight() {
            return right;
        }

        public void setRight(@NonNull Double setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"right\" is null.");
            }
            this.right = setterArg;
        }

        public @NonNull
        Double getBottom() {
            return bottom;
        }

        public void setBottom(@NonNull Double setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"bottom\" is null.");
            }
            this.bottom = setterArg;
        }

        public @NonNull
        Double getWidth() {
            return width;
        }

        public void setWidth(@NonNull Double setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"width\" is null.");
            }
            this.width = setterArg;
        }

        public @NonNull
        Double getHeight() {
            return height;
        }

        public void setHeight(@NonNull Double setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"height\" is null.");
            }
            this.height = setterArg;
        }

        @NonNull
        ArrayList<Object> toList() {
            ArrayList<Object> toListResult = new ArrayList<Object>(6);
            toListResult.add(left);
            toListResult.add(top);
            toListResult.add(right);
            toListResult.add(bottom);
            toListResult.add(width);
            toListResult.add(height);
            return toListResult;
        }

        public static final class Builder {

            private @Nullable
            Double left;
            private @Nullable
            Double top;
            private @Nullable
            Double right;
            private @Nullable
            Double bottom;
            private @Nullable
            Double width;
            private @Nullable
            Double height;

            public @NonNull
            Builder setLeft(@NonNull Double setterArg) {
                this.left = setterArg;
                return this;
            }

            public @NonNull
            Builder setTop(@NonNull Double setterArg) {
                this.top = setterArg;
                return this;
            }

            public @NonNull
            Builder setRight(@NonNull Double setterArg) {
                this.right = setterArg;
                return this;
            }

            public @NonNull
            Builder setBottom(@NonNull Double setterArg) {
                this.bottom = setterArg;
                return this;
            }

            public @NonNull
            Builder setWidth(@NonNull Double setterArg) {
                this.width = setterArg;
                return this;
            }

            public @NonNull
            Builder setHeight(@NonNull Double setterArg) {
                this.height = setterArg;
                return this;
            }

            public @NonNull
            PyTorchRect build() {
                PyTorchRect pigeonReturn = new PyTorchRect();
                pigeonReturn.setLeft(left);
                pigeonReturn.setTop(top);
                pigeonReturn.setRight(right);
                pigeonReturn.setBottom(bottom);
                pigeonReturn.setWidth(width);
                pigeonReturn.setHeight(height);
                return pigeonReturn;
            }
        }
    }

    /**
     * Generated class from Pigeon that represents data sent in messages.
     */
    public static final class ResultObjectDetection {
        private @NonNull
        Long classIndex;
        private @Nullable
        String className;
        private @NonNull
        Double score;
        private @NonNull
        PyTorchRect rect;

        /**
         * Constructor is private to enforce null safety; use Builder.
         */
        private ResultObjectDetection() {
        }

        static @NonNull
        ResultObjectDetection fromList(@NonNull ArrayList<Object> list) {
            ResultObjectDetection pigeonResult = new ResultObjectDetection();
            Object classIndex = list.get(0);
            pigeonResult.setClassIndex((classIndex == null) ? null : ((classIndex instanceof Integer) ? (Integer) classIndex : (Long) classIndex));
            Object className = list.get(1);
            pigeonResult.setClassName((String) className);
            Object score = list.get(2);
            pigeonResult.setScore((Double) score);
            Object rect = list.get(3);
            pigeonResult.setRect((rect == null) ? null : PyTorchRect.fromList((ArrayList<Object>) rect));
            return pigeonResult;
        }

        public @NonNull
        Long getClassIndex() {
            return classIndex;
        }

        public void setClassIndex(@NonNull Long setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"classIndex\" is null.");
            }
            this.classIndex = setterArg;
        }

        public @Nullable
        String getClassName() {
            return className;
        }

        public void setClassName(@Nullable String setterArg) {
            this.className = setterArg;
        }

        public @NonNull
        Double getScore() {
            return score;
        }

        public void setScore(@NonNull Double setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"score\" is null.");
            }
            this.score = setterArg;
        }

        public @NonNull
        PyTorchRect getRect() {
            return rect;
        }

        public void setRect(@NonNull PyTorchRect setterArg) {
            if (setterArg == null) {
                throw new IllegalStateException("Nonnull field \"rect\" is null.");
            }
            this.rect = setterArg;
        }

        @NonNull
        ArrayList<Object> toList() {
            ArrayList<Object> toListResult = new ArrayList<Object>(4);
            toListResult.add(classIndex);
            toListResult.add(className);
            toListResult.add(score);
            toListResult.add((rect == null) ? null : rect.toList());
            return toListResult;
        }

        public static final class Builder {

            private @Nullable
            Long classIndex;
            private @Nullable
            String className;
            private @Nullable
            Double score;
            private @Nullable
            PyTorchRect rect;

            public @NonNull
            Builder setClassIndex(@NonNull Long setterArg) {
                this.classIndex = setterArg;
                return this;
            }

            public @NonNull
            Builder setClassName(@Nullable String setterArg) {
                this.className = setterArg;
                return this;
            }

            public @NonNull
            Builder setScore(@NonNull Double setterArg) {
                this.score = setterArg;
                return this;
            }

            public @NonNull
            Builder setRect(@NonNull PyTorchRect setterArg) {
                this.rect = setterArg;
                return this;
            }

            public @NonNull
            ResultObjectDetection build() {
                ResultObjectDetection pigeonReturn = new ResultObjectDetection();
                pigeonReturn.setClassIndex(classIndex);
                pigeonReturn.setClassName(className);
                pigeonReturn.setScore(score);
                pigeonReturn.setRect(rect);
                return pigeonReturn;
            }
        }
    }

    private static class ModelApiCodec extends StandardMessageCodec {
        public static final ModelApiCodec INSTANCE = new ModelApiCodec();

        private ModelApiCodec() {
        }

        @Override
        protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
            switch (type) {
                case (byte) 128:
                    return PyTorchRect.fromList((ArrayList<Object>) readValue(buffer));
                case (byte) 129:
                    return ResultObjectDetection.fromList((ArrayList<Object>) readValue(buffer));
                default:
                    return super.readValueOfType(type, buffer);
            }
        }

        @Override
        protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
            if (value instanceof PyTorchRect) {
                stream.write(128);
                writeValue(stream, ((PyTorchRect) value).toList());
            } else if (value instanceof ResultObjectDetection) {
                stream.write(129);
                writeValue(stream, ((ResultObjectDetection) value).toList());
            } else {
                super.writeValue(stream, value);
            }
        }
    }
}
